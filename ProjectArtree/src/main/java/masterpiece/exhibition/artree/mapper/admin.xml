<?xml version="1.0" encoding="UTF-8"?>

<!-- ====  mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="admin">

	<!-- tag 가져오기 - categories -->
	<select id="getTypes" resultType="String">
		select distinct type from tag
	</select>
	
	<!-- tag 가져오기 - keywords -->
	<select id="getKeywords" parameterType="String" resultType="String">
		select keyword from tag where type = #{ type }
	</select>
	
	<!-- gallery 가져오기 -->
	<select id="getGalleries" resultType="masterpiece.exhibition.admin.model.GalleryVO">
		select galleryno, location, galleryname, detailaddress, nvl(tel, '-') as tel from Gallery 
		where galleryname != '-'
		order by location, galleryname
	</select>
	
	<!-- gallery location 가져오기 -->
	<select id="getGalleryLocations" resultType="String">
		select distinct location from gallery where location != '-' order by location
	</select>
	
	<!-- gallery 검색 -->
	<select id="wordSearchShow" resultType="masterpiece.exhibition.admin.model.GalleryVO" parameterType="HashMap">
		select galleryno, location, galleryname, detailaddress, nvl(tel, '-') as tel from Gallery 
		where galleryname != '-'
		<if test='searchWord != "" , galleryLocation == ""'>	<!-- 지역을 선택하지 않고 검색어를 입력한 경우 -->
		    and galleryname like '%' || #{ searchWord } || '%' or detailaddress like '%' || #{ searchWord } || '%'
		</if>
		<if test='galleryLocation != "" , searchWord != ""'>	<!-- 지역을 선택하고 또 검색어를 입력한 경우 -->
			and location = #{ galleryLocation } 
			and galleryname like '%' || #{ searchWord } || '%'
		</if>
		<if test='searchWord == "" , galleryLocation == ""'>
		
		</if>
		order by location, galleryname
	</select>
	
	<select id="getApplyingno" resultType="int">
		select seq_appliedExhibits.nextval from dual
	</select>
	
	<!-- 전시회 등록 -->
	<insert id="applyExhibition" parameterType="HashMap">
		insert into appliedexhibits ( applyingno, fk_galleryno, exhibitionname, applier, author, startdate, enddate,
			email, tel, genre, tag, authorinfo, exhibitioninfo, price, foodordrink, extrarestriction, photo, openclosetime )
		values ( to_number( #{ applyingno } ), to_number( #{ fk_galleryno } ), #{ exhibitionname }, #{ applier }, #{ author }, #{ startdate },
			#{ enddate }, #{ email }, #{ tel }, #{ genre }, #{ tag }, #{ authorinfo }, #{ exhibitioninfo }, to_number( #{ price } )
			, #{ foodordrink }, #{ extrarestriction }, #{ photo }, #{ openclosetime } )
	</insert>
	
	<insert id="addExhibitImage" parameterType="HashMap">
		insert into appliedDetail(appliedimgseq, fk_applyingno, imagefilename, imageorgfilename, imagefilesize
							, imageinfo, thumbnailfilename, mainposter) 
		values( seq_appliedDetail.nextval, #{ fk_applyingno }, #{ imagefilename }, #{ imageorgfilename }
			, #{ imagefilesize }, #{ imageinfo }, #{ thumbnailfilename }, #{ mainposter } )
	</insert>
	
	<!-- 전시회목록 가져오기 -->
	<select id="getExhibitionList" resultType="masterpiece.exhibition.exhibits.model.ExhibitsVO">
		select exhibitionno, exhibitionname, author, status from exhibition where status = '전시중' order by exhibitionno desc
	</select>
	
	<!-- 전시회정보 가져오기 -->
	<resultMap type="HashMap" id="getExhibitionDetailMap">
		<result property="exhibitionno" 	column="exhibitionno" 		javaType="String" />
		<result property="exhibitionname" 	column="exhibitionname" 	javaType="String" />
		<result property="author" 			column="author" 			javaType="String" />
		<result property="status" 			column="status" 			javaType="String" />
		<result property="galleryname" 		column="galleryname" 		javaType="String" />
		<result property="applier" 			column="applier" 			javaType="String" />
		<result property="tel" 				column="tel" 				javaType="String" />
		<result property="email" 			column="email" 				javaType="String" />
		<result property="startdate" 		column="startdate" 			javaType="String" />
		<result property="enddate" 			column="enddate" 			javaType="String" />
		<result property="genre" 			column="genre" 				javaType="String" />
		<result property="tag" 				column="tag" 				javaType="String" />
		<result property="exhibitioninfo" 	column="exhibitioninfo" 	javaType="String" />
		<result property="price" 			column="price" 				javaType="String" />
		<result property="foodordrink" 		column="foodordrink" 		javaType="String" />
		<result property="extrarestriction" column="extrarestriction" 	javaType="String" />
		<result property="photo" 			column="photo" 				javaType="String" />
		<result property="openclosetime" 	column="openclosetime" 		javaType="String" />
		<result property="image1" 			column="image1" 			javaType="String" />
		<result property="image2" 			column="image2" 			javaType="String" />
		<result property="image3" 			column="image3" 			javaType="String" />
		<result property="mainposter" 		column="mainposter" 		javaType="String" />
		<result property="image1info" 		column="image1info" 		javaType="String" />
		<result property="image2info" 		column="image2info" 		javaType="String" />
		<result property="image3info" 		column="image3info" 		javaType="String" />
	</resultMap>
	<select id="getExhibitionDetail" resultMap="getExhibitionDetailMap" parameterType="String">
		select E.exhibitionno, E.exhibitionname, E.author, E.status, G.galleryname
			, E.applier, E.tel, E.email, E.startdate, E.enddate, E.genre, E.tag
			, E.exhibitioninfo, E.price, E.foodordrink, E.extrarestriction, E.photo, E.openclosetime
			, nvl(ED.mainposter, '없음') AS mainposter
			, nvl(ED.image1, '없음') AS image1, nvl(ED.image2, '없음') AS image2, nvl(ED.image3, '없음') AS image3
            , nvl(ED.image1info, '없음') AS image1info, nvl(ED.image2info, '없음') AS image2info, nvl(ED.image3info, '없음') AS image3info
		from exhibition E 
        JOIN gallery G on E.fk_galleryno = G.galleryno
        JOIN exhibitiondetail ED on E.exhibitionno = ED.fk_exhibitionno
        where E.exhibitionno = #{ no }
	</select>
	
	<!-- 새로운 전시회목록 가져오기 -->
	<select id="getNewExhibitionList" resultType="masterpiece.exhibition.exhibits.model.ExhibitsVO">
		select exhibitionno, exhibitionname, author, status from exhibition where status = '전시예정' order by exhibitionno desc
	</select>
	
	<!-- 전시 대기 -> 전시중으로 바꾸기 -->
	<update id="changeExhibitStatus" parameterType="String">
		update exhibition set status = '전시중' where exhibitionno = #{ exhibitionno }
	</update>
	
	<!-- 종료된 전시목록 조회 -->
	<select id="getAfterExhibitionList" resultType="masterpiece.exhibition.exhibits.model.ExhibitsVO">
		select exhibitionno, exhibitionname, author, status from exhibition where status = '전시종료' order by enddate desc
	</select>

	<!-- 검토할 전시회 목록 조회 -->
	<resultMap type="HashMap" id="appliedExhibitionMap">
		<result property="applyingno" 		column="applyingno" 		javaType="String" />
		<result property="exhibitionname" 	column="exhibitionname" 	javaType="String" />
		<result property="author" 			column="author" 			javaType="String" />
	</resultMap>
	<select id="getAppliedExhibitionList" resultMap="appliedExhibitionMap">
		select applyingno, exhibitionname, author from appliedexhibits where status = '검토예정' order by applyingno desc
	</select>

	<!-- 검토할 전시회 조회 -->
	<resultMap type="HashMap" id="getAppliedExhibitionDetailMap">
		<result property="applyingno" 		column="applyingno" 		javaType="String" />
		<result property="exhibitionname" 	column="exhibitionname" 	javaType="String" />
		<result property="author" 			column="author" 			javaType="String" />
		<result property="authorinfo" 		column="authorinfo" 		javaType="String" />
		<result property="galleryname" 		column="galleryname" 		javaType="String" />
		<result property="galleryno" 		column="galleryno" 			javaType="String" />
		<result property="applier" 			column="applier" 			javaType="String" />
		<result property="tel" 				column="tel" 				javaType="String" />
		<result property="email" 			column="email" 				javaType="String" />
		<result property="startdate" 		column="startdate" 			javaType="String" />
		<result property="enddate" 			column="enddate" 			javaType="String" />
		<result property="genre" 			column="genre" 				javaType="String" />
		<result property="tag" 				column="tag" 				javaType="String" />
		<result property="exhibitioninfo" 	column="exhibitioninfo" 	javaType="String" />
		<result property="price" 			column="price" 				javaType="String" />
		<result property="foodordrink" 		column="foodordrink" 		javaType="String" />
		<result property="extrarestriction" column="extrarestriction" 	javaType="String" />
		<result property="photo" 			column="photo" 				javaType="String" />
		<result property="openclosetime" 	column="openclosetime" 		javaType="String" />
	</resultMap>
	<select id="getAppliedExhibitionDetail" resultMap="getAppliedExhibitionDetailMap" parameterType="String">
		select A.applyingno, A.exhibitionname, A.author, A.authorinfo, G.galleryname, G.galleryno
			, A.applier, A.tel, A.email, A.startdate, A.enddate, A.genre, A.tag
			, A.exhibitioninfo, A.price, A.foodordrink, A.extrarestriction, A.photo, A.openclosetime
		from appliedExhibits A JOIN gallery G
		on A.fk_galleryno = G.galleryno
        where A.applyingno = #{ no }
	</select>
	
	<!-- 이미지 가져오기 -->
	<resultMap type="HashMap" id="getAppliedExhibitionImageMap">
		<result property="imagefilename" 	 	column="imagefilename" 		javaType="String" />
 		<result property="imageorgfilename"  	column="imageorgfilename" 	javaType="String" />
 		<result property="imagefilesize"  		column="imagefilesize" 		javaType="String" />
 		<result property="thumbnailfilename"  	column="thumbnailfilename" 	javaType="String" />
 		<result property="mainposter"  			column="mainposter" 		javaType="String" />
 		<result property="imageinfo"			column="imageinfo"			javaType="String" />
	</resultMap>    
    <select id="getAppliedExhibitionImage" parameterType="String" resultMap="getAppliedExhibitionImageMap">
		select fk_applyingno, imagefilename, imageorgfilename, imagefilesize, thumbnailfilename, mainposter
			, nvl(imageinfo, '없음') AS imageinfo
		from appliedDetail
		where fk_applyingno = #{ no }
		order by fk_applyingno desc
	</select>
	
	<!-- 등록할 전시회번호 채번해오기 -->
	<select id="getExhibitionno" resultType="String">
		select seq_exhibition.nextval from dual
	</select>
	
	<!-- 검토목록에 있던 전시회를 전시예정으로 변경 -->
	<insert id="displayNewExhibition" parameterType="HashMap">
		insert into exhibition ( exhibitionno, fk_galleryno, exhibitionname, applier, author, startdate, enddate
			, email, tel, genre, tag, authorinfo, exhibitioninfo, price, foodordrink, extrarestriction, photo
			, openclosetime, status, readcount )
		values ( to_number( #{ exhibitionno } ), #{ fk_galleryno }, #{ exhibitionname }, #{ applier }, #{ author }
			, #{ startdate }, #{ enddate }, #{ email }, #{ tel }, #{ genre }, #{ tag }, #{ authorinfo }, #{ exhibitioninfo }
			, to_number( #{ price } ), #{ foodordrink }, #{ extrarestriction }, #{ photo }, #{ openclosetime }, '전시예정', 0 )
	</insert>
	
	<!-- 전시회의 이미지 테이블에 insert -->
	<insert id="displayNewExhibitionImg" parameterType="HashMap">
		insert into exhibitiondetail ( fk_exhibitionno, image1, image2, image3, image1info, image2info, image3info, mainposter )
		values( #{ fk_exhibitionno }, #{ image1 }, #{ image2 }, #{ image3 }, #{ image1info }, #{ image2info }, #{ image3info }, #{ mainposter } )
	</insert>
	
	<!-- 지원된 전시회 테이블(appliedExhibits) 의 status 데이터를 '검토완료'로 변경 -->
	<update id="changeAppliedExhibitsStatus" parameterType="String">
		update appliedExhibits set status = '검토완료' where applyingno = #{ no }
	</update>
	
	<!-- 회원목록 불러오기 -->
	<select id="getMemberList" resultType="masterpiece.exhibition.member.model.MemberVO">
		select idx, email, name, status from member order by idx
	</select>
	
	<!-- 모든 회원 목록 - 검색조건이 없을 경우의 총 게시물 건수(totalCount) -->
	<select id="getTotalCountWithoutSearch" resultType="int">
		select count(*) from member
	</select>
	
	<!-- 모든 회원 목록 - 검색조건이 있을 경우의 총 게시물 건수(totalCount) -->
	<select id="getTotalCountWithSearch" parameterType="HashMap" resultType="int">
		select count(*) from member where ${ searchCondition } like '%'|| #{ searchWord } ||'%'
	</select>
	
	<!-- 모든 회원목록 -->
	<select id="memberListWithPaging" parameterType="HashMap" resultType="masterpiece.exhibition.member.model.MemberVO">
		select idx, email, name, status
		from 
		(
			select rownum AS rno
				, idx, email, name, status
			from   
			(  
				select idx, email, name, status
				from member
				<if test='searchWord != ""'>
					where ${ searchCondition } like '%'|| #{ searchWord } ||'%'
				</if>
				order by idx desc
			) V  
		) T 	   
		where rno between #{ startRno } and #{ endRno }
	</select>

	<!-- 탈퇴한 회원 목록 - 검색조건이 없을 경우의 총 게시물 건수(totalCount) -->
	<select id="getTotalCountWithoutSearchDeactivated" resultType="int">
		select count(*) from member where status = 0
	</select>
	
	<!-- 탈퇴한 회원 목록 - 검색조건이 있을 경우의 총 게시물 건수(totalCount) -->
	<select id="getTotalCountWithSearchDeactivated" parameterType="HashMap" resultType="int">
		select count(*) from member where ${ searchCondition } like '%'|| #{ searchWord } ||'%' where status = 0
	</select>

	<!-- 탈퇴한 회원목록 -->
	<select id="deactivatedMemberList" parameterType="HashMap" resultType="masterpiece.exhibition.member.model.MemberVO">
		select idx, email, name, status
		from 
		(
			select rownum AS rno
				, idx, email, name, status
			from   
			(  
				select idx, email, name, status
				from member
				where status = 0
				<if test='searchWord != ""'>
					and ${ searchCondition } like '%'|| #{ searchWord } ||'%'
				</if>
				order by idx desc
			) V  
		) T 	   
		where rno between #{ startRno } and #{ endRno }
	</select>
	
	<!-- 가입회원 목록 - 검색조건이 없을 경우의 총 게시물 건수(totalCount) -->
	<select id="getTotalCountWithoutSearchActivated" resultType="int">
		select count(*) from member where status = 1
	</select>
	
	<!-- 가입회원 목록 - 검색조건이 있을 경우의 총 게시물 건수(totalCount) -->
	<select id="getTotalCountWithSearchActivated" parameterType="HashMap" resultType="int">
		select count(*) from member where ${ searchCondition } like '%'|| #{ searchWord } ||'%' where status = 1
	</select>
	
	<!-- 가입회원목록 -->
	<select id="activatedMemberList" parameterType="HashMap" resultType="masterpiece.exhibition.member.model.MemberVO">
		select idx, email, name, status
		from 
		(
			select rownum AS rno
				, idx, email, name, status
			from   
			(  
				select idx, email, name, status
				from member
				where status = 1
				<if test='searchWord != ""'>
					and ${ searchCondition } like '%'|| #{ searchWord } ||'%'
				</if>
				order by idx desc
			) V  
		) T 	   
		where rno between #{ startRno } and #{ endRno }
	</select>
	
	<!-- 관리자목록 - 검색조건이 없을 경우의 총 게시물 건수(totalCount) -->
	<select id="getTotalCountWithoutSearchAdmin" resultType="int">
		select count(*) from member where status = 2
	</select>
	
	<!-- 관리자목록 - 검색조건이 있을 경우의 총 게시물 건수(totalCount) -->
	<select id="getTotalCountWithSearchAdmin" parameterType="HashMap" resultType="int">
		select count(*) from member where ${ searchCondition } like '%'|| #{ searchWord } ||'%' where status = 2
	</select>
	
	<!-- 관리자목록 -->
	<select id="adminList" parameterType="HashMap" resultType="masterpiece.exhibition.member.model.MemberVO">
		select idx, email, name, status
		from 
		(
			select rownum AS rno
				, idx, email, name, status
			from   
			(  
				select idx, email, name, status
				from member
				where status = 2
				<if test='searchWord != ""'>
					and ${ searchCondition } like '%'|| #{ searchWord } ||'%'
				</if>
				order by idx desc
			) V  
		) T 	   
		where rno between #{ startRno } and #{ endRno }
	</select>
	
	<!-- 회원상세정보출력 -->
	<select id="getMemberInfo" parameterType="String" resultType="masterpiece.exhibition.member.model.MemberVO">
		select idx, email, name, agegroup, gender, area, hp, status, registerday, lastlogindate from member where idx = #{ no }
	</select>
	
	<!-- 주문목록출력 -->
	<resultMap type="HashMap" id="orderListMap">
		<result property="reserno" 		column="reserno" 	javaType="String" />
		<result property="reserdate" 	column="reserdate" 	javaType="String" />
		<result property="resertotal" 	column="resertotal" javaType="String" />
		<result property="name" 		column="name" 		javaType="String" />
		<result property="hp" 			column="hp" 		javaType="String" />
		<result property="fk_idx" 		column="fk_idx" 	javaType="String" />
	</resultMap>
	<select id="getOrderList" parameterType="String" resultMap="orderListMap">
		select R.reserno, R.fk_idx, R.reserdate, R.resertotal, M.name, M.hp
		from reser R JOIN member M
		on R.fk_idx = M.idx
		where R.fk_idx = #{ no }
		order by R.reserno desc
	</select>
	
	<!-- 주문정보출력 -->
	<resultMap type="HashMap" id="getOrderInfoMap">
		<result property="reserno" 		column="reserno" 	javaType="String" />
		<result property="reserdate" 	column="reserdate" 	javaType="String" />
		<result property="resertotal" 	column="resertotal" javaType="String" />
		<result property="name" 		column="name" 		javaType="String" />
		<result property="hp" 			column="hp" 		javaType="String" />
		<result property="reserstat" 	column="reserstat" 	javaType="String" />
		<result property="dday" 		column="dday" 		javaType="String" />
		<result property="purtype" 		column="purtype" 	javaType="String" />
		<result property="qt" 			column="qt" 		javaType="String" />
		<result property="price" 		column="price" 		javaType="String" />
		<result property="exname" 		column="exname" 	javaType="String" />
	</resultMap>
	<select id="getOrderInfo" parameterType="String" resultMap="getOrderInfoMap">
		select R.reserno, R.reserdate, R.resertotal, M.name, M.hp, D.reserstat, D.dday, E.purtype, E.qt, E.price, D.exname
		from reser R 
		JOIN member M on R.fk_idx = M.idx
		JOIN reserdetail D on D.fk_reserno = R.reserno
		JOIN reserex E on E.fk_reserdetailno = D.reserdetailno
		where R.reserno = #{ reserno }
		order by R.reserno desc
	</select>
	
	<!-- ========= 예매율 차트 ========= -->
	
	<!-- 총 예매 수 -->
	<select id="getTotalCount" resultType="int">
		select count(*)
		from reser R 
		JOIN member M on R.fk_idx = M.idx
		JOIN reserdetail D on D.fk_reserno = R.reserno
		JOIN reserex E on E.fk_reserdetailno = D.reserdetailno
		order by R.reserno desc
	</select>
	
		<!-- 예매율차트 -->
	<resultMap type="HashMap" id="getChartByTicketingRateMap">
		<result property="cnt" 		column="cnt" 	javaType="String" />
		<result property="name" 	column="name" 	javaType="String" />
		<result property="pct" 		column="pct" 	javaType="String" />
	</resultMap>
	<select id="getChartByTicketingRate" parameterType="int" resultMap="getChartByTicketingRateMap">
		select D.exname AS name
			, sum( E.qt ) AS cnt
			, round ( count(*) / ( select count(*) from reserdetail ) * 100 , 2 ) AS pct
		from reser R LEFT JOIN reserdetail D
		on R.reserno = D.fk_reserno
        JOIN reserex E on D.reserdetailno = E.fk_reserdetailno
		group by D.exname
		order by cnt desc
	</select>
	
</mapper>
